" ==========================================
"  bundle 插件管理和配置项
" -----------------#github
"   插件来自 github，只需要 ： 作者名/项目名
"  Bundle 'tomasr/molokai'
"   插件来自 vim-scripts，直接写插件名就行了
"  Bundle 'L9'
"   如使用自己的git库的插件，像下面这样做
"  Bundle 'git://git.wincent.com/command-t.git'
" ---------------#git库在本地机器的情况
"   如使用自己的git库在本地机器，像下面这样做
"  Bundle 'file:///Users/gmarik/path/to/plugin'
"
" ==========================================
set nocompatible               " be iMproved
filetype off " required! turn off
set rtp+=$VIM_TMP_PATH/bundle/vundle/
call vundle#rc("$VIM_TMP_PATH/bundle")

" ################### Bundles 配置 #########################
" 使用Vundle来管理插件
" vim plugin bundle control, command model
"     :BundleInstall     install 安装配置的插件
"     :BundleInstall!    update  更新
"     :BundleClean       remove plugin not in list 删除本地无用插件

" ##### 插件管理工具
Bundle 'gmarik/vundle'


" ###############################
" 主题 molokai
Bundle 'nine2/molokai'
let g:molokai_original = 1
set t_Co=256
colorscheme molokai

" ###############################
" 主题. 状态栏
" Bundle 'Lokaltog/vim-powerline'
Bundle 'vim-airline/vim-airline'
" set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Bundle 'gcmt/taboo.vim'
" let g:taboo_tab_format = " %N.[%f %m] "
" let g:taboo_modified_tab_flag = "+"
Bundle 'vim-airline/vim-airline-themes'
let g:airline_theme='molokai'
let g:airline_exclude_preview = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#switch_buffers_and_tabs = 1

let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:airline#extensions#taboo#enabled = 0
let g:airline#extensions#whitespace#enabled = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '▶'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = '│'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
" 修改文件： ~/.vim/bundle/vim-airline/autoload/airline.vim 中的下面的函数
"     可以在状态栏显示时间
" function! airline#statusline(winnr)
"   if has_key(s:contexts, a:winnr)
"    " return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
"     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line.'|'.strftime("%d %H:%M")
"   endif
"  " in rare circumstances this happens...see #276
"   return ''
" endfunction

" Always show the status line - use 2 lines for the status bar
set laststatus=2


" ###### 中文 vim 帮助
Bundle 'asins/vimcdoc'


" ##### 自动根据当前打开文件切换工作目录
Bundle 'airblade/vim-rooter'
let g:rooter_silent_chdir = 1
let g:rooter_resolve_links = 1



" ###############################
" vim-shell
Bundle 'Shougo/vimproc.vim'
Bundle 'Shougo/vimshell.vim'
let g:vimshell_prompt_expr =
        \ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '



" ###############################
" 代码格式管理
" ##### 缩进标识
Bundle 'nathanaelkane/vim-indent-guides'
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=0
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=1
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
:nmap <silent> <Leader>i <Plug>IndentGuidesToggle


" ##### 快速去行尾空格
Bundle 'bronson/vim-trailing-whitespace'
" 下列文件类型中的行尾空格tab不高亮显示
let g:extra_whitespace_ignored_filetypes = ['unite', 'mkd', 'diff', 'ctrlsf']
map <leader>, :FixWhitespace<cr>


" ###### 快速注释
Bundle 'scrooloose/nerdcommenter'
" <leader>cc 注释选中内容
" <leader>cu 取消选中注释
" <leader>c$ 从当前光标开始到行尾注释掉
let g:NERDCustomDelimiters = {
    \ 'c': { 'leftAlt': '/*','rightAlt': '*/', 'left': '//', 'right': '' },
    \ }
let NERD_cpp_alt_style=1
let NERD_c_alt_style=1
let g:NERDSpaceDelims=1



" ###############################
" 语法高亮
" 针对项目设置的自定义语法，参考 README
Bundle "nine2/vim-custom-syntax"
" ###### 多语言语法检查
Bundle 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" to see error location list
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0
let g:syntastic_error_symbol='✘✘'
let g:syntastic_warning_symbol='➤➤'
let g:syntastic_enable_highlighting=1
" 使用pyflakes,速度比pylint快
let g:syntastic_python_checkers=['pep8', 'pyflakes']
let g:syntastic_python_pep8_args='--ignore=E501,E225'
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black
nnoremap <Leader>se :Errors<cr>
nnoremap <Leader>sn :lnext<cr>
nnoremap <Leader>sp :lprevious<cr>

" ##### 增加对 STL\C++14等的C++语法高亮
Bundle 'Mizuchi/STL-Syntax'

" 给 typedef 和 enum 配色
" 需要使用到 ctags
Bundle 'vim-scripts/TagHighlight'


" ##### python fly check, 弥补syntastic只能打开和保存才检查语法的不足
Bundle 'kevinw/pyflakes-vim'
let g:pyflakes_use_quickfix = 0


" ##### pythgon的语法高亮 for python.vim syntax highlight
Bundle 'hdima/python-syntax'
let python_highlight_all = 1



" ###############################
" C/Cpp

" ##### *.cpp 和 *.h 间切换
Bundle 'vim-scripts/a.vim'
nmap <Leader>ch :AS<CR>
" 子窗口中显示 *.cpp 或 *.h
nmap <Leader>sch :A<CR>


" ###############################
" python

" ##### Python 代码补全
Bundle 'vim-scripts/Pydiction'
let g:pydiction_location = '~/.vim/bundle/Pydiction/complete-dict'

" ##### Python 快捷操作
Bundle 'yssource/python.vim'


" ###############################
" Git

" ##### 同git diff,实时展示文件中修改的行
" 只是不喜欢除了行号多一列, 默认关闭,gs时打开
Bundle 'airblade/vim-gitgutter'
""""""
let g:gitgutter_map_keys = 0
let g:gitgutter_enabled = 1
let g:gitgutter_highlight_lines = 0
nnoremap <leader>gs :GitGutterToggle<CR>
nnoremap <leader>gk :GitGutterPrevHunk<CR>
nnoremap <leader>gj :GitGutterNextHunk<CR>
" 一个命令切换高亮行
func! CustomGitGutterLineHights()
    if g:gitgutter_highlight_lines is 1
        exe ":GitGutterLineHighlightsDisable"
    else
        exe ":GitGutterLineHighlightsEnable"
    endif
endfunc
nnoremap <leader>gh :call CustomGitGutterLineHights()<CR>

" ##### 使用 git blame 等功能
Bundle "tpope/vim-fugitive"
" 使用命令
" Gblame, Gstatue, help fugitive
" 使用 Glog 可查看历史版本文件
nnoremap <leader>gb :Gblame<CR>


" ##### 可以查看回到某个历史状态
Bundle 'sjl/gundo.vim'
""""""
noremap <leader>ht :GundoToggle<CR>

" ##### 在 nerdtree 上显示目录文件的 git 状态
Bundle 'Xuyuanp/nerdtree-git-plugin'

" ###############################
" Markdown
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_math=1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_no_default_key_mappings=1
" https://github.com/suan/vim-instant-markdown
" npm -g install instant-markdown-d



" ###############################
" Golang
Bundle "fatih/vim-go"
nmap gs :GoDef<CR>
" 此行会导致 C-] 失效, 同时禁用了 go 的 gd 指令，使用上面的 gs 代替
let g:go_def_mapping_enabled = 0
au FileType go nnoremap <buffer> <silent> <C-]> :GoDef<cr>
" 取消绑定K, 使用 <leader>gd 代替
let g:go_doc_keywordprg_enabled = 0
au FileType go nmap <Leader>gd <Plug>(go-doc)
" 自动导入包, 格式化 imports
nmap gi :GoImports<CR>
" 保存时自动使用 gofmt 格式代码，使用 goimports 格式 import 部分，
" 同时自动导入缺少的import
let g:go_fmt_command = "goimports"


Bundle 'Blackrush/vim-gocode'

" go debug
Bundle 'sebdah/vim-delve'
" let g:delve_backend = "native"
map <leader>bb :DlvAddBreakpoint<cr>
map <leader>ba :DlvToggleTracepoint<cr>
map <leader>br :DlvRemoveBreakpoint<cr>
map <leader>be :DlvRemoveTracepoint<cr>
map <leader>bc :DlvClearAll<cr>
map <leader>bt :DlvTest<cr>
map <leader>bd :DlvDebug<cr>


" ###############################
" 自动补全

" ###### 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'
" for python docstring ,优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']



" ###############################
" Vim 快捷操作
" ##### 更高效的移动 [,, + w/fx]
Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)


" ##### 快速的匹配 https://github.com/vim-scripts/matchit.zip
" Bundle 'vim-scripts/matchit.zip'


" ##### 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
Bundle "kshenoy/vim-signature"
" 书签设定。mx，设定/取消当前行名为 x 的标签；m,，自动设定下一个可用书签名，
"   前面提说，独立书签名是不能重复的，在你已经有了多个独立书签，
"   当想再设置书签时，需要记住已经设定的所有书签名，否则很可能会将已有的书签冲掉，这可不好，
"   所以，vim-signature 为你提供了 m, 快捷键，
"   自动帮你选定下一个可用独立书签名；mda，删除当前文件中所有独立书签。
" 书签罗列。ms，罗列出当前文件中所有书签，选中后回车可直接跳转；
" 书签跳转。mn，按行号前后顺序，跳转至下个独立书签；
"   mp，按行号前后顺序，跳转至前个独立书签。
"   书签跳转方式很多，除了这里说的行号前后顺序，
"   还可以基于书签名字母顺序跳转、分类书签同类跳转、分类书签不同类间跳转等等。
let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "m.",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "mda",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "mn",
        \ 'GotoPrevSpotByPos'  :  "mp",
        \ 'GotoNextMarker'     :  "[+",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListLocalMarks'     :  "ms",
        \ 'ListLocalMarkers'   :  "m?"
        \ }"]]]']"}


" ##### 选中区块
Bundle 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)


" ##### 多光标选中编辑
Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'


" ##### 文件搜索 change to https://github.com/ctrlpvim/ctrlp.vim
Bundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
" map <leader>f :CtrlPMRU<CR>
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*        " Linux/MacOSX
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
" " 如果安装了ag, 使用ag
"  if executable('ag')
"   " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
"   " ag is fast enough that CtrlP doesn't need to cache
"    let g:ctrlp_use_caching = 0
"  endif

" ##### 类似sublimetext的搜索
Bundle "dyng/ctrlsf.vim"
""""""
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
nmap \ <Plug>CtrlSFCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
    \ "open"  : "<Space>",
    \ "openb" : "O",
    \ "tab"   : "t",
    \ "tabb"  : "T",
    \ "prevw" : "p",
    \ "quit"  : "q",
    \ "next"  : "<C-J>",
    \ "prev"  : "<C-K>",
    \ "pquit" : "q",
    \ }
nnoremap <leader>sp :CtrlSF<CR>


" ##### 括号显示增强
Bundle 'kien/rainbow_parentheses.vim'
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
\ ['brown',       'RoyalBlue3'],
\ ['Darkblue',    'SeaGreen3'],
\ ['darkgray',    'DarkOrchid3'],
\ ['darkgreen',   'firebrick3'],
\ ['darkcyan',    'RoyalBlue3'],
\ ['darkred',     'SeaGreen3'],
\ ['darkmagenta', 'DarkOrchid3'],
\ ['brown',       'firebrick3'],
\ ['gray',        'RoyalBlue3'],
\ ['darkmagenta', 'DarkOrchid3'],
\ ['Darkblue',    'firebrick3'],
\ ['darkgreen',   'RoyalBlue3'],
\ ['darkcyan',    'SeaGreen3'],
\ ['darkred',     'DarkOrchid3'],
\ ['red',         'firebrick3'],
\ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces


" ##### 目录导航
Bundle 'scrooloose/nerdtree'
" map <leader>n :NERDTreeToggle<CR>
noremap <silent> <Leader>nf :NERDTreeFind<cr>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
"打开NERDTree,定位到当前文件
noremap <silent> <Leader>nf :NERDTreeFind<cr>
autocmd vimenter * if !argc() | NERDTree | endif
" 选中目录，按 ma 可以在目录中新建文件


" ##### 目录导航
Bundle 'jistr/vim-nerdtree-tabs'
""""""
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0
" 自动开启nerdtree
"let g:nerdtree_tabs_open_on_console_startup=1


" 标签导航
Bundle 'majutsushi/tagbar'
nmap <F9> :TagbarToggle<CR>
nmap <leader>m :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_show_linenumbers = 2
" cpp类型
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'd:macros:1',
        \ 'g:enums',
        \ 't:typedefs:0:0',
        \ 'e:enumerators:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members:0:0',
        \ 'v:global:0:0',
        \ 'x:external:0:0',
        \ 'l:local:0:0'
    \ ],
    \ 'sro'        : '::',
    \ 'kind2scope' : {
        \ 'g' : 'enum',
        \ 'n' : 'namespace',
        \ 'c' : 'class',
        \ 's' : 'struct',
        \ 'u' : 'union'
    \ },
    \ 'scope2kind' : {
        \ 'enum'      : 'g',
        \ 'namespace' : 'n',
        \ 'class'     : 'c',
        \ 'struct'    : 's',
        \ 'union'     : 'u'
    \ }
\ }
" markdown
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }
" Makefile (targets)
let g:tagbar_type_make = {
            \ 'kinds':[
                \ 'm:macros',
                \ 't:targets'
            \ ]
\}
" obj-c
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
" R
let g:tagbar_type_r = {
    \ 'ctagstype' : 'r',
    \ 'kinds'     : [
        \ 'f:Functions',
        \ 'g:GlobalVariables',
        \ 'v:FunctionVariables',
    \ ]
\ }
" for ruby
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }
" 去除taglist =>原因: 使用tagbar和ctrlp-funky可以直接快速跳转函数和变量位置,taglist有些多余


Bundle "rking/ag.vim"
" set runtimepath^=~/.vim/bundle/ag
" let g:ag_prg="ag --vimgrep --smart-case  --column --nogroup --noheading"
let g:ag_working_path_mode="r"
let g:ag_highlight=1
nmap <F7> :Ag -w <c-r>=expand("<cword>")<cr><cr>


" Vim Workspace Controller
Bundle 'szw/vim-ctrlspace'
set hidden
""""""
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

Bundle 'Valloric/ListToggle'
let g:lt_location_list_toggle_map = '<leader>lt'
let g:lt_quickfix_list_toggle_map = '<leader>qt'
" ##### 快速赋值语句对齐
Bundle 'junegunn/vim-easy-align'
vmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['='] = { 'pattern': '=', 'ignore_groups': ['String'] }


" ##### quickrun
Bundle 'thinca/vim-quickrun'
""""""
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F10> :QuickRun<CR>


" 文件头增加 copyright
Bundle "nine2/vim-copyright"
let g:file_copyright_name = "bbxytl"
let g:file_copyright_email = "bbxytl@gmail.com"
let g:file_copyright_auto_filetypes = ['sh', 'plx', 'pl', 'pm', 'py', 'python', 'h', 'hpp', 'c', 'cpp', 'java']
map uh :CopyrightUpdate<cr>

" Bundle "vim-scripts/DoxygenToolkit.vim"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1

" ####################################
" 加载 不同 配置
let g:cur_bundle_file_path = expand("$VIM_TMP_PATH/vimrc.bundles")
if filereadable(expand(g:cur_bundle_file_path))
    exec "so  ".g:cur_bundle_file_path
endif

" xterm 颜色(256色)
Bundle "guns/xterm-color-table.vim"

" ################## 插件配置结束 ###########################
filetype plugin indent on     " required!
